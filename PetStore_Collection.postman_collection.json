{
	"info": {
		"_postman_id": "ff18890a-e67d-4152-bbc4-0690e50a9bd2",
		"name": "PetStore_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13208443",
		"_collection_link": "https://universal-meadow-681299.postman.co/workspace/PetStore_Automation~3c4a81ea-08ed-48a5-8a15-7cde5e09d478/collection/13208443-ff18890a-e67d-4152-bbc4-0690e50a9bd2?action=share&source=collection_link&creator=13208443"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "+Ve || createUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random values using Postman's faker-like dynamic variables",
									"",
									"let id = pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"id\", id);",
									"",
									"let firstname = pm.variables.replaceIn('{{$randomFirstName}}');",
									"pm.environment.set(\"firstname\", firstname);",
									"",
									"// let username = pm.variables.replaceIn('{{$randomUserName}}');",
									"pm.environment.set(\"username\", firstname+id);",
									"",
									"let lastname = pm.variables.replaceIn('{{$randomLastName}}');",
									"pm.environment.set(\"lastname\",lastname)",
									"",
									"",
									"let phonenumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"pm.environment.set(\"phonenumber\",phonenumber)",
									"",
									"let password = pm.variables.replaceIn(\"Benny\");",
									"pm.environment.set(\"password\",password)",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response code is numeric\", function() {",
									"",
									"    pm.expect(jsonData.code).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Message contains user ID\", function() {",
									"    const expectedId = pm.environment.get(\"id\");",
									"    pm.expect(jsonData.message).to.equal(expectedId);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"username\": \"{{firstname}}{{id}}\",\n  \"firstName\": \"{{firstname}}\",\n  \"lastName\": \"{{lastname}}\",\n  \"email\": \"{{firstname}}@yopmail.com\",\n  \"password\": \"Nikkie\",\n  \"phone\": \"{{phonenumber}}\",\n  \"userStatus\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve || createUser-invaliddata",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random values using Postman's faker-like dynamic variables",
									"",
									"let id = pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"id\", id);",
									"",
									"let firstname = pm.variables.replaceIn('{{$randomFirstName}}');",
									"pm.collectionVariables.set(\"firstname\", firstname);",
									"",
									"// let username = pm.variables.replaceIn('{{$randomUserName}}');",
									"pm.collectionVariables.set(\"username\", firstname+id);",
									"",
									"let lastname = pm.variables.replaceIn('{{$randomLastName}}');",
									"pm.collectionVariables.set(\"lastname\",lastname)",
									"",
									"",
									"let phonenumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"pm.collectionVariables.set(\"phonenumber\",phonenumber)",
									"",
									"let password = pm.variables.replaceIn(\"Nikkie\");",
									"pm.collectionVariables.set(\"password\",password)",
									"",
									"",
									"",
									"// let password = \"Nikkie\" + Math.floor(Math.random() * 1000); // Nikkie487",
									"// pm.collectionVariables.set(\"password\", password);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"IF unexpectedly successful: Log for investigation\", function () {",
									"    if (pm.response.code === 200 || pm.response.code === 201) {",
									"        console.warn(\"WARNING: API accepted invalid email format!\");",
									"        console.warn(\"Invalid email: 'invalid-email-format'\");",
									"        console.warn(\"This may indicate insufficient email validation\");",
									"        ",
									"        console.log(\"Response:\", JSON.stringify(jsonData, null, 2));",
									"        ",
									"        // Mark this as a potential issue",
									"        pm.test.skip(\"Email validation may be insufficient - security concern\");",
									"    }",
									"});",
									"",
									"pm.test(\"Log comprehensive test results\", function () {",
									"    ",
									"    console.log(\"\\nðŸŽ¯ INVALID EMAIL FORMAT TEST SUMMARY:\");",
									"    console.log(\"==========================================\");",
									"    console.log(\"Test Email: 'invalid-email-format'\");",
									"    console.log(\"HTTP Status: \" + pm.response.code);",
									"    console.log(\"Response Time: \" + pm.response.responseTime + \"ms\");",
									"    console.log(\"Content Type: \" + pm.response.headers.get('Content-Type'));",
									"    console.log(\"Response Body: \" + JSON.stringify(jsonData, null, 2));",
									"    console.log(\"==========================================\");",
									"    ",
									"    if (pm.response.code >= 400) {",
									"        console.log(\"PASS: Invalid email correctly rejected\");",
									"    } else {",
									"        console.log(\"FAIL: Invalid email unexpectedly accepted\");",
									"    }",
									"    ",
									"    pm.expect(true).to.be.true;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"username\": \"^^&*&**\",\n  \"firstName\": \"$%^&^&&&\",\n  \"lastName\": \"#$$%%%\",\n  \"email\": \"{{firstname}}@\",\n  \"password\": \"Nikkie\",\n  \"phone\": \"{{phonenumber}}\",\n  \"userStatus\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve || createUser- emptydata",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random values using Postman's faker-like dynamic variables",
									"",
									"let id = pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"id\", id);",
									"",
									"let firstname = pm.variables.replaceIn('{{$randomFirstName}}');",
									"pm.collectionVariables.set(\"firstname\", firstname);",
									"",
									"// let username = pm.variables.replaceIn('{{$randomUserName}}');",
									"pm.collectionVariables.set(\"username\", firstname+id);",
									"",
									"let lastname = pm.variables.replaceIn('{{$randomLastName}}');",
									"pm.collectionVariables.set(\"lastname\",lastname)",
									"",
									"",
									"let phonenumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"pm.collectionVariables.set(\"phonenumber\",phonenumber)",
									"",
									"let password = pm.variables.replaceIn(\"Nikkie\");",
									"pm.collectionVariables.set(\"password\",password)",
									"",
									"",
									"",
									"// let password = \"Nikkie\" + Math.floor(Math.random() * 1000); // Nikkie487",
									"// pm.collectionVariables.set(\"password\", password);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code should be 400 for empty required fields\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"",
									"pm.test(\"Response should contain error information\", function () {",
									"",
									"    pm.expect(jsonData).to.have.property('code');",
									"    // API might return error details in different properties",
									"    pm.expect(jsonData).to.satisfy(function(response) {",
									"        return response.hasOwnProperty('message') || ",
									"               response.hasOwnProperty('error') || ",
									"               response.hasOwnProperty('errors');",
									"    });",
									"});",
									"",
									"pm.test(\"Security headers are present\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"IF accepted: Verify response structure for unexpected success\", function () {",
									"    if (pm.response.code === 200) {",
									"        console.warn(\"WARNING: API accepted empty strings - this might be a bug!\");",
									"        ",
									"        pm.expect(jsonData).to.have.property('code');",
									"        pm.expect(jsonData.code).to.equal(200);",
									"        ",
									"        // This might indicate the API has insufficient validation",
									"        pm.test.skip(\"Empty string validation missing - potential security issue\");",
									"    }",
									"});",
									"",
									"pm.test(\"Log test execution details\", function () {",
									"    ",
									"    console.log(\"ðŸ“Š Test Execution Summary:\");",
									"    console.log(\"Status Code:\", pm.response.code);",
									"    console.log(\"Response Time:\", pm.response.responseTime + \"ms\");",
									"    console.log(\"Response Size:\", pm.response.responseSize + \" bytes\");",
									"    console.log(\"Response:\", JSON.stringify(jsonData, null, 2));",
									"    ",
									"    pm.expect(true).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"\",\n  \"username\": \"\",\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"phone\": \"\",\n  \"userStatus\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve || createUser Duplicate Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random values using Postman's faker-like dynamic variables",
									"",
									"let id = pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"id\", id);",
									"",
									"let firstname = pm.variables.replaceIn('{{$randomFirstName}}');",
									"pm.collectionVariables.set(\"firstname\", firstname);",
									"",
									"// let username = pm.variables.replaceIn('{{$randomUserName}}');",
									"pm.collectionVariables.set(\"username\", firstname+id);",
									"",
									"let lastname = pm.variables.replaceIn('{{$randomLastName}}');",
									"pm.collectionVariables.set(\"lastname\",lastname)",
									"",
									"",
									"let phonenumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"pm.collectionVariables.set(\"phonenumber\",phonenumber)",
									"",
									"let password = pm.variables.replaceIn(\"Nikkie\");",
									"pm.collectionVariables.set(\"password\",password)",
									"",
									"",
									"",
									"// let password = \"Nikkie\" + Math.floor(Math.random() * 1000); // Nikkie487",
									"// pm.collectionVariables.set(\"password\", password);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Duplicate user should be rejected\", function () {",
									"    // Should return conflict or bad request status",
									"    pm.expect(pm.response.code).to.be.oneOf([409, 400, 422]);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Handle unexpected success (potential duplicate detection failure)\", function () {",
									"    if (pm.response.code === 200 || pm.response.code === 201) {",
									"        console.warn(\"WARNING: API accepted duplicate user!\");",
									"        console.warn(\"This indicates potential duplicate detection failure\");",
									"        console.warn(\"User data that was accepted:\");",
									"        console.warn(\"   Username: \" + pm.environment.get(\"firstname\") + pm.environment.get(\"id\"));",
									"        console.warn(\"   Email: \" + pm.environment.get(\"firstname\") + \"@yopmail.com\");",
									"        console.warn(\"   ID: 3\");",
									"        ",
									"    ",
									"        console.warn(\"ðŸ“„ Response: \" + JSON.stringify(jsonData, null, 2));",
									"        ",
									"        // This might indicate a serious issue with duplicate detection",
									"        pm.test.skip(\"Duplicate detection may be broken - investigate immediately\");",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 3,\n  \"username\": \"{{firstname}}{{id}}\",\n  \"firstName\": \"{{firstname}}\",\n  \"lastName\": \"{{lastname}}\",\n  \"email\": \"{{firstname}}@yopmail.com\",\n  \"password\": \"Nikkie\",\n  \"phone\": \"{{phonenumber}}\",\n  \"userStatus\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve || createUserlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n  \n  \"id\": 3,\n  \"username\": \"Adenike\",\n  \"firstName\": \"Nike\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"string\",\n  \"phone\": \"07068508707\",\n  \"userStatus\":1\n    },\n   {\n  \"id\":5,\n  \"username\": \"Adenike\",\n  \"firstName\": \"Nike\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"string\",\n  \"phone\": \"07068508707\",\n  \"userStatus\":1\n  }\n]\n  \n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve || createUserlists || invaliduserdetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n  \n  \"id\": 3,\n  \"username\": \"Adenike\",\n  \"firstName\": \"Nike\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"string\",\n  \"phone\": \"07068508707\",\n  \"userStatus\":1\n    },\n   {\n  \"id\":5,\n  \"username\": \"Adenike\",\n  \"firstName\": \"Nike\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"string\",\n  \"phone\": \"07068508707\",\n  \"userStatus\":1\n  }\n]\n  \n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve || createUserwithArray",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n  \n  \"id\": 3,\n  \"username\": \"Adenike\",\n  \"firstName\": \"Nike\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"string\",\n  \"phone\": \"07068508707\",\n  \"userStatus\":1\n    },\n   {\n  \"id\":5,\n  \"username\": \"Adenike\",\n  \"firstName\": \"Nike\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"string\",\n  \"phone\": \"07068508707\",\n  \"userStatus\":1\n  }\n]\n  \n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve || createUserwithInvalidData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"\tpm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve|| userlogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"ResponseBody contains login user message\",()=> {",
									"    pm.expect(jsonData.message).to.include(\"logged in user session\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/login",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve|| userlogin-invalidcredentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"\tpm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"ResponseBody contains login user message\",()=> {",
									"    pm.expect(jsonData.message).to.include(\"logged in user session\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"&*(((\",\n  \"password\": \"*((())\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/login",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve|| userlogin-emptycredentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"\tpm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"ResponseBody contains login user message\",()=> {",
									"    pm.expect(jsonData.message).to.include(\"logged in user session\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"\",\n  \"password\": \"\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/login",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve ||logoutUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve || getUser-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Use JSON if you're expecting a JSON response, not XML",
									"const responseData = pm.response.json();",
									"",
									"// âœ… Test: Response code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// âœ… Test: Response Content-Type is JSON",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// âœ… Test: Validate schema (required keys exist)",
									"pm.test(\"Validate the response schema for required fields\", function () {",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData).to.have.all.keys(\"id\", \"username\", \"firstName\", \"lastName\", \"email\", \"password\", \"phone\", \"userStatus\");",
									"});",
									"",
									"// âœ… Test: Fields are not empty or undefined",
									"pm.test(\"Response data fields are not empty\", () => {",
									"    pm.expect(responseData.id).to.not.be.undefined;",
									"    pm.expect(responseData.username).to.not.be.empty;",
									"    pm.expect(responseData.firstName).to.not.be.empty;",
									"    pm.expect(responseData.lastName).to.not.be.empty;",
									"    pm.expect(responseData.email).to.not.be.empty;",
									"    pm.expect(responseData.password).to.not.be.empty;",
									"    pm.expect(responseData.phone).to.not.be.empty;",
									"    pm.expect(responseData.userStatus).to.not.be.undefined;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let username2= \"Adenike\"",
									"pm.variables.set(\"username2\",username2)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{username}}"
							],
							"query": [
								{
									"key": "username2",
									"value": "Adenike",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve || getUser-NonExistingUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const responseData = pm.response.json();",
									"",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									"",
									"",
									"pm.test(\"Response contains an error code\", function () {",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('code').that.is.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let NonExistingusername= \"yu7898\"",
									"pm.variables.set(\"NonExistingusername\",NonExistingusername)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/Nwabugo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"Nwabugo"
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve || updateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData =pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 3,\n  \"username\": \"polo\",\n  \"firstName\": \"{{lastname}}\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"07068508708\",\n  \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve || updateUserEmptyUSer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 3,\n  \"username\": \"polo\",\n  \"firstName\": \"{{lastname}}\",\n  \"lastName\": \"Douglas\",\n  \"email\": \"nikedouglas@gmail.com\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"07068508708\",\n  \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "+Ve || deleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{username}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "-Ve || deleteUser emptyusername",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has required structure\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{username}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "+ve|| getUser",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 12,\r\n  \"username\": \"blue\",\r\n  \"firstName\": \"Barry\",\r\n  \"lastName\": \"white\",\r\n  \"email\": \"barry@yopmail.com\",\r\n  \"password\": \"Benny\",\r\n  \"phone\": \"02087356454\",\r\n  \"userStatus\":1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 1000ms\",()=> {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "phonenumber",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		}
	]
}